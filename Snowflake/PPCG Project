WITH ROSTER AS (SELECT DISTINCT(RESP_NAME), RESP_CODE FROM S_PRD_FISERV_PREMIER.REFINED.DATA_DESC_RESP_CODE

WHERE DATE_LAST_UPDATED = (SELECT MAX(DATE_LAST_UPDATED) FROM S_PRD_FISERV_PREMIER.REFINED.DATA_DESC_RESP_CODE)),

PREV_ROSTER AS(SELECT DISTINCT(RESP_NAME), RESP_CODE FROM S_PRD_FISERV_PREMIER.REFINED.DATA_DESC_RESP_CODE

WHERE DATE_LAST_UPDATED = (SELECT MAX(DATE_LAST_UPDATED) FROM S_PRD_FISERV_PREMIER.REFINED.DATA_DESC_RESP_CODE)),


DDAAccountChanges AS (
    SELECT 
        RC.DDA_ACCOUNT,
        ROSTER.RESP_NAME AS TRANSFERRED_TO,
        RC.RESP_CODE,
        RC.PRIMARY_NAME_ID,
        CURRENT_BALANCE AS BALANCE_AT_TRANSFER,
        CYTD_AVERAGE_BALANCE AS AVG_BALANCE_AT_TRANSFER,
        EFFECTIVE_INTEREST_RATE,
        RC.DATE_LAST_UPDATED AS TRANSFERRED_DATE,
        RC.CMTD_AVERAGE_BALANCE,
        RC.CMTD_AVG_EFFECTIVE_INTEREST_RATE,
  DATE_OPENED,
        LAG(RC.RESP_CODE) OVER(PARTITION BY RC.DDA_ACCOUNT ORDER BY RC.DATE_LAST_UPDATED) AS PREV_RESP_CODE
    FROM S_PRD_FISERV_PREMIER.REFINED.DDA_ACCT AS RC
    JOIN ROSTER 
        ON RC.RESP_CODE = ROSTER.RESP_CODE
    WHERE RC.DATE_LAST_UPDATED > '2024-12-31'
), SAVAccountChanges AS (
    SELECT 
        RC.SAV_ACCOUNT,
        ROSTER.RESP_NAME AS TRANSFERRED_TO,
        RC.RESP_CODE,
        RC.PRIMARY_NAME_ID,
        CURRENT_BALANCE AS BALANCE_AT_TRANSFER,
        CYTD_AVERAGE_BALANCE AS AVG_BALANCE_AT_TRANSFER,
        EFFECTIVE_INTEREST_RATE,
        RC.DATE_LAST_UPDATED AS TRANSFERRED_DATE,
        RC.CMTD_AVERAGE_BALANCE,
        RC.CMTD_AVG_EFFECTIVE_INTEREST_RATE,
        DATE_OPENED,
        LAG(RC.RESP_CODE) OVER(PARTITION BY RC.SAV_ACCOUNT ORDER BY RC.DATE_LAST_UPDATED) AS PREV_RESP_CODE
  
    FROM S_PRD_FISERV_PREMIER.REFINED.SAV_ACCT AS RC
    JOIN ROSTER 
        ON RC.RESP_CODE = ROSTER.RESP_CODE
    WHERE RC.DATE_LAST_UPDATED > '2024-12-31'
), CODAccountChanges AS (
    SELECT 
        RC.COD_ACCOUNT,
        ROSTER.RESP_NAME AS TRANSFERRED_TO,
        RC.RESP_CODE,
        RC.PRIMARY_NAME_ID,
        CURRENT_BALANCE AS BALANCE_AT_TRANSFER,
        CYTD_AVERAGE_BALANCE AS AVG_BALANCE_AT_TRANSFER,
        EFFECTIVE_INTEREST_RATE,
        RC.DATE_LAST_UPDATED AS TRANSFERRED_DATE,
        RC.CMTD_AVERAGE_BALANCE,
        RC.CMTD_AVG_EFFECTIVE_INTEREST_RATE,
         DATE_OPENED,
        LAG(RC.RESP_CODE) OVER(PARTITION BY RC.COD_ACCOUNT ORDER BY RC.DATE_LAST_UPDATED) AS PREV_RESP_CODE
  
    FROM S_PRD_FISERV_PREMIER.REFINED.COD_ACCT AS RC
    JOIN ROSTER 
        ON RC.RESP_CODE = ROSTER.RESP_CODE
    WHERE RC.DATE_LAST_UPDATED > '2024-12-31'
), NOTEAccountChanges AS (
    SELECT 
        RC.NOTE_NUMBER,
        ROSTER.RESP_NAME AS TRANSFERRED_TO,
        RC.RESP_CODE,
        RC.PRIMARY_NAME_ID,
        NET_CURR_BOOK_BALANCE AS BALANCE_AT_TRANSFER,
        CYTD_AVERAGE_BALANCE AS AVG_BALANCE_AT_TRANSFER,
        RATE_OVER_SPLIT,
        RC.DATE_LAST_UPDATED AS TRANSFERRED_DATE,
        RC.CMTD_AVG_NET_CURR_BOOK_BALANCE,
        RC.CMTD_AVG_RATE_OVER_SPLIT,
        DATE_OPENED,
        LAG(RC.RESP_CODE) OVER(PARTITION BY RC. NOTE_NUMBER ORDER BY RC.DATE_LAST_UPDATED) AS PREV_RESP_CODE
  
    FROM S_PRD_FISERV_PREMIER.REFINED.NOTE_ACCT AS RC
    JOIN ROSTER 
        ON RC.RESP_CODE = ROSTER.RESP_CODE
    WHERE RC.DATE_LAST_UPDATED > '2024-12-31'
  AND RC.NOTE_NUMBER NOT LIKE '%01'
)




SELECT 
    AC.DDA_ACCOUNT AS ACCOUNT_NUMBER,
    AC.PRIMARY_NAME_ID,
    AC.TRANSFERRED_TO,
    AC.RESP_CODE,
    AC.BALANCE_AT_TRANSFER AS CURRENT_BALANCE_AT_TRANSFER,
    AC.EFFECTIVE_INTEREST_RATE AS RATE,
    AC.AVG_BALANCE_AT_TRANSFER AS CYTD_AVG_BALANCE_AT_TRANSFER,
    AC.CMTD_AVERAGE_BALANCE AS CMTD_AVG_BALANCE_AT_TRANSFER,
    AC.CMTD_AVG_EFFECTIVE_INTEREST_RATE AS CMTD_AVG_RATE,
    AC.TRANSFERRED_DATE,
    AC.DATE_OPENED,
    AC.PREV_RESP_CODE,
    PREV_ROSTER.RESP_NAME AS PREV_RM_NAME,  -- Fetch RM Name for previous RESP_CODE
    'DDA' AS ACCOUNT_TYPE
FROM DDAAccountChanges AS AC
LEFT JOIN PREV_ROSTER 
    ON AC.PREV_RESP_CODE = PREV_ROSTER.RESP_CODE
QUALIFY 
    AC.PREV_RESP_CODE IS NOT NULL 
    AND AC.RESP_CODE <> AC.PREV_RESP_CODE

UNION ALL

SELECT 
    AC.SAV_ACCOUNT AS ACCOUNT_NUMBER,
    AC.PRIMARY_NAME_ID,
    AC.TRANSFERRED_TO,
    AC.RESP_CODE,
    AC.BALANCE_AT_TRANSFER AS CURRENT_BALANCE_AT_TRANSFER,
    AC.EFFECTIVE_INTEREST_RATE AS RATE,
    AC.AVG_BALANCE_AT_TRANSFER AS CYTD_AVG_BALANCE_AT_TRANSFER,
    AC.CMTD_AVERAGE_BALANCE AS CMTD_AVG_BALANCE_AT_TRANSFER,
    AC.CMTD_AVG_EFFECTIVE_INTEREST_RATE AS CMTD_AVG_RATE,
    AC.TRANSFERRED_DATE,
    AC.DATE_OPENED,
    AC.PREV_RESP_CODE,
    PREV_ROSTER.RESP_NAME AS PREV_RM_NAME,  -- Fetch RM Name for previous RESP_CODE
    'SAV' AS ACCOUNT_TYPE
FROM SAVAccountChanges AS AC
LEFT JOIN PREV_ROSTER 
    ON AC.PREV_RESP_CODE = PREV_ROSTER.RESP_CODE
QUALIFY 
    AC.PREV_RESP_CODE IS NOT NULL 
    AND AC.RESP_CODE <> AC.PREV_RESP_CODE
    
UNION ALL
SELECT 
    AC.COD_ACCOUNT AS ACCOUNT_NUMBER,
    AC.PRIMARY_NAME_ID,
    AC.TRANSFERRED_TO,
    AC.RESP_CODE,
    AC.BALANCE_AT_TRANSFER AS CURRENT_BALANCE_AT_TRANSFER,
    AC.EFFECTIVE_INTEREST_RATE AS RATE,
    AC.AVG_BALANCE_AT_TRANSFER AS CYTD_AVG_BALANCE_AT_TRANSFER,
    AC.CMTD_AVERAGE_BALANCE AS CMTD_AVG_BALANCE_AT_TRANSFER,
    AC.CMTD_AVG_EFFECTIVE_INTEREST_RATE AS CMTD_AVG_RATE,
    AC.TRANSFERRED_DATE,
    AC.DATE_OPENED,
    AC.PREV_RESP_CODE,
    PREV_ROSTER.RESP_NAME AS PREV_RM_NAME,  -- Fetch RM Name for previous RESP_CODE
    'COD' AS ACCOUNT_TYPE
FROM CODAccountChanges AS AC
LEFT JOIN PREV_ROSTER 
    ON AC.PREV_RESP_CODE = PREV_ROSTER.RESP_CODE
QUALIFY 
    AC.PREV_RESP_CODE IS NOT NULL 
    AND AC.RESP_CODE <> AC.PREV_RESP_CODE
    
UNION ALL
  
SELECT 
    AC.NOTE_NUMBER AS ACCOUNT_NUMBER,
    AC.PRIMARY_NAME_ID,
    AC.TRANSFERRED_TO,
    AC.RESP_CODE,
    AC.BALANCE_AT_TRANSFER,
    AC.RATE_OVER_SPLIT AS RATE,
    AC.AVG_BALANCE_AT_TRANSFER AS CYTD_AVG_BALANCE_AT_TRANSFER,
    AC.CMTD_AVG_NET_CURR_BOOK_BALANCE AS CMTD_AVG_BALANCE_AT_TRANSFER,
    AC.CMTD_AVG_RATE_OVER_SPLIT AS CMTD_AVG_RATE,
    AC.TRANSFERRED_DATE,
    AC.DATE_OPENED,
    AC.PREV_RESP_CODE,
    PREV_ROSTER.RESP_NAME AS PREV_RM_NAME,  -- Fetch RM Name for previous RESP_CODE
    'NOTE' AS ACCOUNT_TYPE
FROM NOTEAccountChanges AS AC
LEFT JOIN PREV_ROSTER 
    ON AC.PREV_RESP_CODE = PREV_ROSTER.RESP_CODE
QUALIFY 
    AC.PREV_RESP_CODE IS NOT NULL 
    AND AC.RESP_CODE <> AC.PREV_RESP_CODE
    


ORDER BY TRANSFERRED_DATE DESC


